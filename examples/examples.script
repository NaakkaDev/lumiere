local grain = require("lumiere.effects.grain.grain")
local lcd = require("lumiere.effects.lcd.lcd")
local scanlines = require("lumiere.effects.scanlines.scanlines")
local chromatical = require("lumiere.effects.chromatical.chromatical")
local chromatic_aberration = require("lumiere.effects.chromatic_aberration.chromatic_aberration")
local blur = require("lumiere.effects.blur.blur")
local distortion = require("lumiere.effects.distortion.distortion")
local lights = require("lumiere.effects.lights.lights")
local colorgrade = require("lumiere.effects.colorgrade.colorgrade")

local lumiere = require("lumiere.lumiere")

function init(self)
	msg.post(".", "acquire_input_focus")

	self.examples = { "#scene3dproxy", "#scene2dproxy" }
	msg.post("#", "next_example")

	lumiere.use_effects({ })

	local instructions = ""
	.. "[1 = NONE] "
	.. "[2 = GRAIN] "
	.. "[3 = SCANLINES] "
	.. "[4 = CHROMA] "
	.. "[5 = GRAIN, SCANLINES, LCD] "
	.. "[6 = LIGHTS] "
	.. "[7 = COLORGRADE] "
	.. "SPACE = NEXT EXAMPLE"
	msg.post("hud", "instructions", { text = instructions })
end

function on_input(self, action_id, action)
	if action.released then
		if action_id == hash("prg1") then
			lumiere.use_effects({})
		elseif action_id == hash("prg2") then
			lumiere.use_effects({ grain })
		elseif action_id == hash("prg3") then
			lumiere.use_effects({ scanlines })
		elseif action_id == hash("prg4") then
			lumiere.use_effects({ chromatic_aberration })
		elseif action_id == hash("prg5") then
			lumiere.use_effects({ grain, scanlines, lcd})
		elseif action_id == hash("prg6") then
			lumiere.use_effects({ lights })
		elseif action_id == hash("prg7") then
			lumiere.use_effects({ colorgrade })
		elseif action_id == hash("next") then
			msg.post("#", "next_example")
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("next_example") then
		if self.current_proxy then
			msg.post(self.current_proxy, "unload")
			self.current_proxy = nil
		end
		local example = table.remove(self.examples, #self.examples)
		table.insert(self.examples, 1, example)
		msg.post(example, "async_load")
	elseif message_id == hash("proxy_loaded") then
		self.current_proxy = sender
		msg.post(sender, "enable")
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
