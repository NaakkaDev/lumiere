local render_helper = require "orthographic.render.helper"

local lumiere = require "lumiere.lumiere"

local BLACK = vmath.vector4(0)
local AMBIENT_LIGHT = vmath.vector4(0.1, 0.1, 0.1, 1.0)

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})
	self.light_pred = render.predicate({"light"})
		
	self.normal_rt = lumiere.create_render_target("normal", true)
	self.light_rt = lumiere.create_render_target("lights", true)
			
	render_helper.init(self)
	lumiere.init()
end


function update(self)
	render_helper.update(self)
	self.normal_rt.update()
	self.light_rt.update()
	
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())

	-- draw to world space
	render.set_view(render_helper.world_view(self))
	render.set_projection(render_helper.world_projection(self))

	-- draw graphics
	self.normal_rt.clear(BLACK)
	self.normal_rt.draw({ self.tile_pred, self.particle_pred })

	-- draw lights
	local constants = render.constant_buffer()
	constants.time = vmath.vector4(math.random(90, 100) / 100)
	self.light_rt.clear(AMBIENT_LIGHT)
	self.light_rt.draw({ self.light_pred }, constants)
	
	-- draw to quad
	lumiere.set_identity_view_projection()

	-- combine graphics and lights
	lumiere.clear(BLACK, nil, nil)
	lumiere.draw_render_targets({ self.normal_rt, self.light_rt }, lumiere.MATERIAL_MULTIPLY)


	-- draw gui
	render_helper.set_screen_view_projection(self)
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.set_depth_mask(false)
	render.draw_debug2d()
end

function on_message(self, message_id, message)
	render_helper.on_message(self, message_id, message, sender)
end
